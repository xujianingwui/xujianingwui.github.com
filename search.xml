<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[H5本地存储和本地数据库]]></title>
      <url>http://yoursite.com/2017/04/04/H5%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E5%92%8C%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<h2 id="H5-本地存储和本地数据库"><a href="#H5-本地存储和本地数据库" class="headerlink" title="H5 本地存储和本地数据库"></a>H5 本地存储和本地数据库</h2><h3 id="一、本地存储由来的背景："><a href="#一、本地存储由来的背景：" class="headerlink" title="一、本地存储由来的背景："></a>一、本地存储由来的背景：</h3><p>众所周知Html4时代Cookie的大小、格式、存储数据格式等限制，网站应用如果想在浏览器端存储用户的部分信息，那么只能借助于Cookie。但是Cookie的这些限制，也就导致了Cookie只能存储一些ID之类的标识符等简单的数据，复杂的数据就更别扯了。<br><a id="more"></a><br><strong>下面是Cookie的限制：</strong></p>
<blockquote>
<ol>
<li>大多数浏览器支持最大为 4096 字节的 Cookie。  </li>
<li>浏览器还限制站点可以在用户计算机上存储的 Cookie 的数量。大多数浏览器只允许每个站点存储 20 个 Cookie；如果试图存储更多 Cookie，则最旧的 Cookie 便会被丢弃。  </li>
<li>有些浏览器还会对它们将接受的来自所有站点的 Cookie 总数作出绝对限制，通常为 300 个。  </li>
<li>Cookie默认情况都会随着Http请求发送到后台服务器，但并不是所有请求都需要Cookie的，比如：js、css、图片等请求则不需要cookie。</li>
</ol>
</blockquote>
<h3 id="二、永久本地存储：localStorage"><a href="#二、永久本地存储：localStorage" class="headerlink" title="二、永久本地存储：localStorage"></a>二、永久本地存储：localStorage</h3><p>localStorage提供了四个方法来辅助我们进行对本地存储做相关操作。</p>
<ul>
<li>（1）setItem(key,value)：添加本地存储数据。两个参数，非常简单就不说了。</li>
<li>（2）getItem(key):通过key获取相应的Value。</li>
<li>（3）removeItem(key):通过key删除本地数据。</li>
<li>（4）clear():清空数据。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;  &lt;/br&gt;</div><div class="line">    //添加key-value 数据到 sessionStorage</div><div class="line">    localStorage.setItem(&quot;demokey&quot;, &quot;http://blog.itjeek.com&quot;);</div><div class="line">    //通过key来获取value</div><div class="line">    var dt = localStorage.getItem(&quot;demokey&quot;);</div><div class="line">    alert(dt);</div><div class="line">    //清空所有的key-value数据。</div><div class="line">    //localStorage.clear();</div><div class="line">    alert(localStorage.length);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="三、会话级别的本地存储：sessionStorage"><a href="#三、会话级别的本地存储：sessionStorage" class="headerlink" title="三、会话级别的本地存储：sessionStorage"></a>三、会话级别的本地存储：sessionStorage</h3><p>sessionStorage提供了四个方法来辅助我们进行对本地存储做相关操作。</p>
<ul>
<li>（1）setItem(key,value)：添加本地存储数据。两个参数，非常简单就不说了。</li>
<li>（2）getItem(key):通过key获取相应的Value。</li>
<li>（3）removeItem(key):通过key删除本地数据。</li>
<li>（4）clear():清空数据。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    //添加key-value 数据到 sessionStorage</div><div class="line">    sessionStorage.setItem(&quot;demokey&quot;, &quot;http://blog.itjeek.com&quot;);</div><div class="line">    //通过key来获取value</div><div class="line">    var dt = sessionStorage.getItem(&quot;demokey&quot;);</div><div class="line">    alert(dt);</div><div class="line">    //清空所有的key-value数据。</div><div class="line">    //sessionStorage.clear();</div><div class="line">    alert(sessionStorage.length);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>我自己写的例子<br><img src="/2017/04/04/H5本地存储和本地数据库/code.png" alt="我自己写的例子"></p>
<h3 id="四、逆天了本地数据库"><a href="#四、逆天了本地数据库" class="headerlink" title="四、逆天了本地数据库"></a>四、逆天了本地数据库</h3><p>虽然Html5已经提供了功能强大的localStorage和sessionStorage，但是他们两个都只能提供存储简单数据结构的数据，对于复杂的Web应用的数据却无能为力。逆天的是Html5提供了一个浏览器端的数据库支持，允许我们直接通JS的API在浏览器端创建一个本地的数据库，而且支持标准的SQL的CRUD操作，让离线的Web应用更加方便的存储结构化的数据。接下里介绍一下本地数据的相关API和用法。</p>
<p>操作本地数据库的最基本的步骤是：</p>
<ul>
<li>第一步：openDatabase方法：创建一个访问数据库的对象。  </li>
<li>第二步：使用第一步创建的数据库访问对象来执行transaction方法，通过此方法可以设置一个开启事务成功的事件响应方法，在事件响应方法中可以执行SQL.  </li>
<li>第三步：通过executeSql方法执行查询，当然查询可以是：CRUD。<br>接下来分别介绍一下相关的方法的参数和用法。  </li>
</ul>
<p>（1）openDatabase方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//Demo：获取或者创建一个数据库，如果数据库不存在那么创建之</div><div class="line">var dataBase = openDatabase(&quot;student&quot;, &quot;1.0&quot;, &quot;学生表&quot;, 1024 * 1024,</div><div class="line"> function () &#123; &#125;);</div></pre></td></tr></table></figure></p>
<p>openDatabase方法打开一个已经存在的数据库，如果数据库不存在，它还可以创建数据库。几个参数意义分别是：  </p>
<ul>
<li>1，数据库名称。  </li>
<li>2，数据库的版本号，目前来说传个1.0就可以了，当然可以不填；  </li>
<li>3，对数据库的描述。    </li>
<li>4，设置分配的数据库的大小（单位是kb）。  </li>
<li>5，回调函数(可省略)。<br>初次调用时创建数据库，以后就是建立连接了。</li>
</ul>
<p>（2）db.transaction方法可以设置一个回调函数，此函数可以接受一个参数就是我们开启的事务的对象。然后通过此对象可以进行执行Sql脚本，跟下面的步骤可以结合起来。</p>
<p>（3）通过executeSql方法执行查询。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts.executeSql(sqlQuery,[value1,value2..],dataHandler,errorHandler)</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li>qlQuery：需要具体执行的sql语句，可以是create、select、update、delete；</li>
<li>value1,value2..]：sql语句中所有使用到的参数的数组，在executeSql方法中，将s&gt;语句中所要使用的参数先用“?”代替，然后依次将这些参数组成数组放在第二个参数中</li>
<li>ataHandler：执行成功是调用的回调函数，通过该函数可以获得查询结果集；</li>
<li>4,errorHandler：执行失败时调用的回调函数；</li>
</ul>
<p>下面是一个综合的例子，可以看一下：</p>
<pre><code class="bash">&lt;head&gt;
 &lt;script src=<span class="string">"Scripts/jquery-1.5.1.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;&lt;/script&gt;
    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;
        <span class="keyword">function</span> <span class="function"><span class="title">initDatabase</span></span>() {
            var db = getCurrentDb();//初始化数据库
            <span class="keyword">if</span>(!db) {alert(<span class="string">"您的浏览器不支持HTML5本地数据库"</span>);<span class="built_in">return</span>;}
            db.transaction(<span class="keyword">function</span> (trans) {//启动一个事务，并设置回调函数
                //执行创建表的Sql脚本
                trans.executeSql(<span class="string">"create table if not exists Demo(uName text null,title text null,words text null)"</span>, [], <span class="keyword">function</span> (trans, result) {
                }, <span class="keyword">function</span> (trans, message) {//消息的回调函数alert(message);});
            }, <span class="keyword">function</span> (trans, result) {
            }, <span class="keyword">function</span> (trans, message) {
            });
        }
        $(<span class="function"><span class="title">function</span></span> () {//页面加载完成后绑定页面按钮的点击事件
            initDatabase();
            $(<span class="string">"#btnSave"</span>).click(<span class="function"><span class="title">function</span></span> () {
                var txtName = $(<span class="string">"#txtName"</span>).val();
                var txtTitle = $(<span class="string">"#txtTitle"</span>).val();
                var txtWords = $(<span class="string">"#txtWords"</span>).val();
                var db = getCurrentDb();
                //执行sql脚本，插入数据
                db.transaction(<span class="keyword">function</span> (trans) {
                    trans.executeSql(<span class="string">"insert into Demo(uName,title,words) values(?,?,?) "</span>, [txtName, txtTitle, txtWords], <span class="keyword">function</span> (ts, data) {
                    }, <span class="keyword">function</span> (ts, message) {
                        alert(message);
                    });
                });
                showAllTheData();
            });
        });
        <span class="keyword">function</span> <span class="function"><span class="title">getCurrentDb</span></span>() {
            //打开数据库，或者直接连接数据库参数：数据库名称，版本，概述，大小
            //如果数据库不存在那么创建之
            var db = openDatabase(<span class="string">"myDb"</span>, <span class="string">"1.0"</span>, <span class="string">"it's to save demo data!"</span>, 1024 * 1024); ;
            <span class="built_in">return</span> db;
        }
        //显示所有数据库中的数据到页面上去
        <span class="keyword">function</span> <span class="function"><span class="title">showAllTheData</span></span>() {
            $(<span class="string">"#tblData"</span>).empty();
            var db = getCurrentDb();
            db.transaction(<span class="keyword">function</span> (trans) {
                trans.executeSql(<span class="string">"select * from Demo "</span>, [], <span class="keyword">function</span> (ts, data) {
                    <span class="keyword">if</span> (data) {
                        <span class="keyword">for</span> (var i = 0; i &lt; data.rows.length; i++) {
                            appendDataToTable(data.rows.item(i));//获取某行数据的json对象
                        }
                    }
                }, <span class="keyword">function</span> (ts, message) {alert(message);var tst = message;});
            });
        }
        <span class="keyword">function</span> appendDataToTable(data) {//将数据展示到表格里面
            //uName,title,words
            var txtName = data.uName;
            var txtTitle = data.title;
            var words = data.words;
            var strHtml = <span class="string">""</span>;
            strHtml += <span class="string">"&lt;tr&gt;"</span>;
            strHtml += <span class="string">"&lt;td&gt;"</span>+txtName+<span class="string">"&lt;/td&gt;"</span>;
            strHtml += <span class="string">"&lt;td&gt;"</span> + txtTitle + <span class="string">"&lt;/td&gt;"</span>;
            strHtml += <span class="string">"&lt;td&gt;"</span> + words + <span class="string">"&lt;/td&gt;"</span>;
            strHtml += <span class="string">"&lt;/tr&gt;"</span>;
            $(<span class="string">"#tblData"</span>).append(strHtml);
        }
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;table&gt;
        &lt;tr&gt;
            &lt;td&gt;用户名：&lt;/td&gt;
            &lt;td&gt;&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"txtName"</span> id=<span class="string">"txtName"</span> required/&gt;&lt;/td&gt;
        &lt;/tr&gt;
           &lt;tr&gt;
            &lt;td&gt;标题：&lt;/td&gt;
            &lt;td&gt;&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"txtTitle"</span> id=<span class="string">"txtTitle"</span> required/&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;留言：&lt;/td&gt;
            &lt;td&gt;&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"txtWords"</span> id=<span class="string">"txtWords"</span> required/&gt;&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;
    &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"保存"</span> id=<span class="string">"btnSave"</span>/&gt;
    &lt;hr/&gt;
    &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"展示所哟数据"</span> onclick=<span class="string">"showAllTheData();"</span>/&gt;
    &lt;table id=<span class="string">"tblData"</span>&gt;
    &lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>执行的效果如图：  </p>
<p><img src="/2017/04/04/H5本地存储和本地数据库/demo.png" alt="效果图">  </p>
<p><a href="http://files.cnblogs.com/files/fly_dragon/HTML5.zip" target="_blank" rel="external">源码下载:</a> <a href="http://files.cnblogs.com/files/fly_dragon/HTML5.zip" target="_blank" rel="external">http://files.cnblogs.com/files/fly_dragon/HTML5.zip</a>  </p>
]]></content>
      
        <categories>
            
            <category> H5 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> h5 </tag>
            
            <tag> 本地存储 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[less的用法]]></title>
      <url>http://yoursite.com/2017/04/04/less%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="Less的常见用法"><a href="#Less的常见用法" class="headerlink" title="Less的常见用法"></a>Less的常见用法</h2><p>1.<strong>在less中引入另一个less文件</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@import <span class="string">"ku"</span>;    //引入的是（ku.less）文件;</div></pre></td></tr></table></figure></p>
<p><strong>在less中引入一个css文件</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@import(less) <span class="string">"a.css"</span>;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>2.<strong>嵌套规则（less中最有意思的部分)</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">.ul&#123;    </div><div class="line">  width:600px;  </div><div class="line">  margin: 30px auto;  </div><div class="line">  padding: 0;   </div><div class="line">  list-style:none;  </div><div class="line">  li&#123;  </div><div class="line">     height: 30px;  </div><div class="line">     background: pink; </div><div class="line">     line-height: 30px; </div><div class="line">     margin-bottom: 5px;  </div><div class="line">     padding: 0 10px; </div><div class="line">  &#125;  </div><div class="line">  a&#123;    </div><div class="line">        <span class="built_in">float</span>: left;</div><div class="line">        //&amp;代表上一级选择器</div><div class="line">         &amp;:hover&#123;</div><div class="line">            color:<span class="comment">#000;</span></div><div class="line">           &#125;</div><div class="line">     &#125;   </div><div class="line">  span&#123;  </div><div class="line">       <span class="built_in">float</span>: right;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3.混合的用法（也很常用）</p>
<ul>
<li>.border-01{border:2px solid @ccc}       <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">调用：.test-hunhe&#123;.border-01;width:200px;height:200px&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>.border-02(@w){border:@w solid #ccc}  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">调用：.test-hunhe&#123;.border-02(10px),width:200px;height:200px&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>.border-03(@w:10px){border:@w solid #ccc}  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">调用：.test-hunhe&#123;.border-03(),width:200px;height:200px&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>4.变量<br>less中想声明一个变量的话一定要用@开头，例如：@w：20px；  width:@w;</p>
<p>5.运算（less中的运算 +-*/）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">test</span>:200px;</div><div class="line">.box-01&#123;width:@<span class="built_in">test</span>-20;&#125;;   //less中一个带单位,另一个可以不写单位； 180px</div><div class="line">.box-01&#123;width:@<span class="built_in">test</span>-20*5;&#125;;   100px</div><div class="line">.box-01&#123;width:(@<span class="built_in">test</span>-20)*5;&#125;    //加（）提高优先级</div></pre></td></tr></table></figure></p>
<p>6.@arguments 变量<br>    <strong>@arguments包含了所有传递进来的参数</strong><br>如果你不想单独处理每一个参数的话就可以像这样写<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.border-arg(@w:5px,@xx:solid,@c:black)&#123;</div><div class="line">    border:@arguments;</div><div class="line">  &#125;</div><div class="line">.test-arg&#123;</div><div class="line">    .border-arg(10px);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>7.z.less 库中的常见用法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">.fl();           //<span class="built_in">float</span>:left</div><div class="line">.fr();           //<span class="built_in">float</span>:right</div><div class="line">.clearfix();     //clear:both;</div><div class="line">.bc()            //margin:0 auto;   </div><div class="line">.rel();          //position:relative</div><div class="line">.abs();          //position:absolate</div><div class="line">.fix();          //position:fixed;</div><div class="line">.h100();         //height:100%;</div><div class="line">.l-h(100px);     //line-height:100px;</div><div class="line">.d-b();          //display:block</div><div class="line">.d-i();          //display:inline</div><div class="line">.d-ib();         //display:inline-block</div><div class="line">.font-fm();      //font-family:<span class="string">"Microsoft Yahei"</span>,<span class="string">"微软雅黑"</span>;</div><div class="line">.font<span class="_">-s</span>(14px);   //font-size:14px;(默认12px)</div><div class="line">.font-wb();      //font-weight:bold;</div><div class="line">.tl();           //text-align:left</div><div class="line">.tc();           //text-align:center</div><div class="line">.tr();           //text-align:right;</div><div class="line">.opa(50)         //opacity:0.5; (默认值80)</div><div class="line">.bg(<span class="string">"../img/logo.png"</span>,@x:0,@y:0) </div><div class="line"> //background:url(<span class="string">'../img/logo.png'</span>) 0 0 no-repeat</div><div class="line"></div><div class="line">.ellipsis()      </div><div class="line">//文字省略号 ( )内部使用百分比，例如.ellipsis(8) 出来的结果就是width:92%;</div><div class="line">.border-radius(10px)    //border-radius:10px(默认值:5px)</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> less </category>
            
        </categories>
        
        
        <tags>
            
            <tag> less </tag>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue中keep-alive用法]]></title>
      <url>http://yoursite.com/2017/03/30/vue%E4%B8%ADkeep-alive%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="路由开启keep-alive时的注意点"><a href="#路由开启keep-alive时的注意点" class="headerlink" title="路由开启keep-alive时的注意点"></a>路由开启keep-alive时的注意点</h2><p>原文地址：<a href="http://xiangsongtao.com/article/5853b2c0044bf1353af82fbf" target="_blank" rel="external">http://xiangsongtao.com/article/5853b2c0044bf1353af82fbf</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6学习笔记]]></title>
      <url>http://yoursite.com/2017/03/29/ES6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p>什么是ECMA？</p>
<blockquote>
<p>ECMA是标准，js是实现<br>类似HTML5是标准，IE10，chrom，FF都是实现<br>ECMAscript 简写ECMA 或者ES</p>
</blockquote>
<p>目前版本：<br>低级浏览器：主要支持ES3.1<br>高级浏览器：正在从ES5过渡到ES6<br><a id="more"></a></p>
<h3 id="历史："><a href="#历史：" class="headerlink" title="历史："></a>历史：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">1996 ES1.0   js稳定  Netscape将js提供给ECMA组织，ES正式出现  </div><div class="line">1998 ES2.0    ES2.0正式发布  </div><div class="line">1999 ES3.0    ES3被浏览器被广泛支持  </div><div class="line">2007 ES4.0    ES4过于激进，被废除了  </div><div class="line">2008 ES3.1    4.0退化为严重缩水版的3.1，代号Harmony（和谐）  </div><div class="line">2009 ES5.0    ES5.0正式发布 ，同时公布了Javascript.next也就是后来的6.0  </div><div class="line">2011 ES5.1    ES5.1成为ISO国际标准</div><div class="line">2013 ES6.0    ES6.0 制定草案  </div><div class="line">2013.12  ES6.0  ES6.0草案发布</div><div class="line">2015.6 ES6.0    ES6.0预计发布正式版，同时JavaScript.next指向ES7.0</div></pre></td></tr></table></figure>
<p><strong>兼容性：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">目前为止 ES5 ES6支持情况，凑合  </div><div class="line">nodejs用的就是chrom内核，在node中可以使用ES5 ES6很多特性  </div><div class="line">ES5 和 ES6 已经逐渐沦为后台语言</div></pre></td></tr></table></figure></p>
<p><strong>在浏览器里如何使用?</strong>  </p>
<p>需要用到编译工具     </p>
<ul>
<li>babel  </li>
<li>traceur —由Google出的编辑器，把ES6语法编译为ES5   </li>
<li>bootstrap   引导程序，跟css里面认识bootstrap不一样</li>
</ul>
<h3 id="在网页上使用"><a href="#在网页上使用" class="headerlink" title="在网页上使用"></a>在网页上使用</h3><p>用法一：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;traceur.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;bootstrap.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script type=&quot;module&quot;&gt;</div><div class="line">        </div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>用法二：<br>    直接在线编译—主要用于测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bable:http://babeljs.io/repl/</div></pre></td></tr></table></figure></p>
<p>用法三：<br>    直接在node里面使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a). 直接用，需要添加 &apos;use strict&apos;</div><div class="line">b). node --harmoney_destructuring 1.js</div></pre></td></tr></table></figure></p>
<ul>
<li>1.定义变量 let 已经被浏览器实现了  </li>
</ul>
<p>let —用来去定义变量<br>代码块：{}包起来的代码，形成了一个作用域，块级作用域<br>        比如 if  for while<br><strong> 特点: </strong>只能在代码块里面使用<br>    var 只有函数作用域  </p>
<p>a). let 具备块级作用域<br>b). 不允许重复声明<br>    let a =12;<br>    let a =5;   //错误<br> 总结：其实let才接近其他语言的变量    </p>
<p><strong>用处：</strong><br>封闭空间：（匿名函数自调用）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(function()&#123;</div><div class="line">   var a=12;</div><div class="line">   &#125;)()</div></pre></td></tr></table></figure></p>
<p>现在：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    let a=12;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><strong> i问题：</strong><br>    之前的解决办法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var aBtn=document.getElementsByTagName(&apos;input&apos;)</div><div class="line">for(var i=0;i&lt;aBtn.length;i++)&#123;</div><div class="line">    (function(i)&#123;</div><div class="line">        aBtn[i].onclick=function()&#123;</div><div class="line">            alert(i)</div><div class="line">        &#125;</div><div class="line">    &#125;)(i)</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>es6  let解决办法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var aBtn=document.getElementsByTagName(&apos;input&apos;)</div><div class="line">for(let i=0;i&lt;aBtn.length;i++)&#123;</div><div class="line">        aBtn[i].onclick=function()&#123;</div><div class="line">            alert(i)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  总结: 块级作用域，其实就是匿名函数自调用</p>
<ul>
<li><p>2.const —用来定义 常量<br>  一旦赋值，以后再也修改不了了<br>  <strong> 注意：</strong>const必须给初始值 ，不能重复声明<br>  因为以后再也没办法赋值了，所以声明的时候一定得有值<br>  <strong> 作用：</strong>为了防止意外修改变量<br>  比如引入库名，组件名   </p>
</li>
<li><p>3.字符串连接：<br>  之前：  </p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var str=&quot;&quot;;  </div><div class="line">var str=&apos;&apos;;</div></pre></td></tr></table></figure>
<p>  反单引号： var str=``  字符串模板  </p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">之前: &quot;abc&apos;+变量名+&apos;ef&quot; </div><div class="line">现在：`abc$&#123;变量名&#125;ef`</div></pre></td></tr></table></figure>
</li>
<li><p>4.解构赋值： //自我感觉用到的地方不是很多    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var [a,b,c]=[12,5,101];    </div><div class="line">var &#123;a,b,c&#125;=&#123;b :12,a:4,c:101&#125;; 跟顺序无关</div></pre></td></tr></table></figure>
</li>
</ul>
<p>模式匹配：— 左侧的样子需要和右侧的样子一样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var [a,[b,c],d]=[12,[1,2],5];  </div><div class="line">console.log(a,b,c,d)</div><div class="line"></div><div class="line">var [&#123;a,e&#125;,[b,c],d]=[&#123;e:&apos;eee&apos;,a:&apos;aaa&apos;&#125;,[1,2],5]</div><div class="line">console.log(a,b,c,d,e)</div></pre></td></tr></table></figure></p>
<p>用处–&gt;交互：数据解析<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var arr= [&#123;title:&apos;&apos;,href:&apos;&apos;,img:&apos;&apos;&#125;];</div><div class="line">var [&#123;title,href,img&#125;]=arr;</div><div class="line">console.log(title,href,img);</div></pre></td></tr></table></figure></p>
<p>解构赋值还可以给默认值：<br>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var &#123;time=12,id=0&#125;=&#123;&#125;;</div></pre></td></tr></table></figure></p>
<p>运动框架：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function move(obj,json,options)&#123;</div><div class="line">    options=options || &#123;&#125;;</div><div class="line">    options.time=options.time||300;</div><div class="line">&#125;;</div><div class="line">//用结构赋值来表示给一个默认值</div><div class="line">function move(obj,json,&#123;time=300&#125;=&#123;&#125;)&#123;</div><div class="line">   </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<ul>
<li><p>5.复制数组  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">a) 循环  </div><div class="line">b) Array.from(arr)  </div><div class="line">c) var arr2=[...arr]  </div><div class="line">   &apos;...&apos;的第二个用法：  </div><div class="line">   function show(...args)&#123;  </div><div class="line">        args.push(5);  </div><div class="line">        console.log(args)  </div><div class="line">   &#125;    </div><div class="line">  show(1,2,3,4)</div></pre></td></tr></table></figure>
</li>
<li><p>6.循环  </p>
</li>
</ul>
<p>普通：for<br> for in<br>es6: for of 循环<br>遍历(迭代、循环)整个对象,  表现 类似 for in<br>真正的目的是为了循环 map对象</p>
<p>Map 对象：<br>和json相似，也是一种 key-value 形式<br>Map 对象是为了for of 循环配合而生的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var map= new Map()</div></pre></td></tr></table></figure></p>
<p>设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">map.set(name,value);</div></pre></td></tr></table></figure></p>
<p>获取：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">map.get(name)</div></pre></td></tr></table></figure></p>
<p>删除：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">map.delete(&apos;a&apos;);</div><div class="line">//json:删除  delete map.a</div></pre></td></tr></table></figure></p>
<p>遍历map：<br>  不能使用 for in,没有效果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var map=new Map();</div><div class="line">map.set(&apos;a&apos;,&apos;apple&apos;);</div><div class="line">map.set(&apos;b&apos;,&apos;banana&apos;);</div><div class="line">map.set(&apos;c&apos;,&apos;pear&apos;);</div><div class="line">map.set(&apos;d&apos;,&apos;orange&apos;);</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">for(var name of map)&#123;</div><div class="line">    console.log(name); // a,apple  b,banana</div><div class="line">&#125;</div><div class="line">for(var [key,value] of map)&#123;</div><div class="line">    console.log(key,value); // key value</div><div class="line">&#125;</div><div class="line">for(var key of map.keys())&#123;  //只循环key</div><div class="line">    console.log(key) </div><div class="line">&#125;</div><div class="line">for(var val of map.values())&#123;  //只循环val</div><div class="line">    console.log(val) </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>for.. of 也可以循环数组：  </p>
<ul>
<li><p>只循环值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">for(var value of arr)&#123;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>支循环索引：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">for(var key of arr.keys())&#123;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>索引和值都循环：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">for(var some of arr.entries())</div></pre></td></tr></table></figure>
</li>
<li><p>7.函数  </p>
</li>
</ul>
<p>箭头函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">() =&gt; &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong> 注意：</strong><br><strong> this的问题：（指的是window）</strong><br>    arguments,不能使用了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var json=&#123;</div><div class="line">    a:1,</div><div class="line">    b:2,</div><div class="line">    show:()=&gt;&#123;</div><div class="line">        alert(this.a)  //undefined</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">json.show();</div></pre></td></tr></table></figure></p>
<ul>
<li>8.对象：</li>
</ul>
<p>对象语法简洁化：<br>单例模式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">json</div><div class="line">var name=&apos;abb&apos;;</div><div class="line">var age=101;</div><div class="line">var person=&#123;</div><div class="line">    name,</div><div class="line">    age,</div><div class="line">    showName()&#123;</div><div class="line">        return this.name;</div><div class="line">    &#125;,</div><div class="line">    showAge()&#123;</div><div class="line">        return this.age</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">alert(person.showName())  --&gt;abb</div><div class="line">alert(person.showAge())   --&gt;101</div></pre></td></tr></table></figure></p>
<p>面向对象：<br>之前：<br>    人类   工人类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function Person(name,age)&#123;   //类，构造函数</div><div class="line">    this.name=name;</div><div class="line">    this.age=age;</div><div class="line">&#125;</div><div class="line">Person.prototype.showName=function()&#123;</div><div class="line">    return this.name;</div><div class="line">&#125;</div><div class="line">Person.prototype.showAge=function()&#123;</div><div class="line">    return this.age;</div><div class="line">&#125;</div><div class="line">var p1=new Person(&apos;许嘉宁&apos;,23);</div><div class="line">alert(p1.showName())</div></pre></td></tr></table></figure></p>
<p>ES6:<br>类    class<br>构造函数   constructor<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class Person&#123;                //类</div><div class="line">    constructor(name,age)&#123;</div><div class="line">        this.name=name;</div><div class="line">        this.age=age;</div><div class="line">    &#125;</div><div class="line">    showName()&#123;</div><div class="line">        return this.name;</div><div class="line">    &#125;</div><div class="line">    showAge()&#123;</div><div class="line">        return this.age;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var p1=new Person(&apos;许嘉宁&apos;,20);</div><div class="line">var p2=new Person(&apos;aaa&apos;,23);</div><div class="line">alert(p1.showName())</div></pre></td></tr></table></figure></p>
<p><strong> 函数给默认值 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function move(obj=&apos;对象是必须要填写的&apos;,json=&#123;&#125;,options=&#123;&#125;)&#123;</div><div class="line">    console.log(options)</div><div class="line">&#125;</div><div class="line">move();       //给了默认值之后及时不填参数也不会是undefined</div></pre></td></tr></table></figure></p>
<p><strong> 继承 </strong><br>之前:  子类.prototype=new 父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function Worker(name,age)&#123;</div><div class="line">    Person.apply(this,arguments);</div><div class="line">&#125;</div><div class="line">Worker.prototype=new Person();</div><div class="line">var w1=new Person(&apos;ddd&apos;,20);</div><div class="line">alert(w1.showName());</div></pre></td></tr></table></figure></p>
<pre><code>** es6: **
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class Worker extends Person&#123;</div><div class="line">    constructor(name,age,job=&quot;扫地的&quot;)&#123;</div><div class="line">        super(name,age);   //调用父级的构造</div><div class="line">        this.job=job;</div><div class="line">    &#125;</div><div class="line">    showJob()&#123;</div><div class="line">        return this.job</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var w1=new Worker(&apos;mmm&apos;,56);</div></pre></td></tr></table></figure>
</code></pre><ul>
<li>9.模块化：  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">seajs requireJs</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ES6自带模块化      </div><div class="line">如何定义(导出)模块</div></pre></td></tr></table></figure>
<ul>
<li><p>10.Promise:   ———承诺  </p>
<p>就是一个对象，用来传递异步操作的数据(消息)</p>
</li>
</ul>
<p>异步：多个操作可以同时进行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pending(等待、处理中)--&gt; Resolve(完成、fullFilled)</div><div class="line">                     --&gt; Rejected(拒绝、失败)</div></pre></td></tr></table></figure>
<p>使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var p1=new Promise(function(resolve,reject)&#123;</div><div class="line">    if(异步处理成功了)&#123;</div><div class="line">        resolve(成功数据)</div><div class="line">    &#125;else&#123;</div><div class="line">        reject(失败原因)</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">p1.then(成功(resolve),失败(reject))</div></pre></td></tr></table></figure></p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">const fs=require(&apos;fs&apos;);</div><div class="line">fs.readFile(&apos;index.html&apos;,function(err,data)&#123;</div><div class="line">    var p1=Promise(function(resolve,reject)&#123;</div><div class="line">        if(err)&#123;</div><div class="line">            reject(err)</div><div class="line">        &#125;else&#123;</div><div class="line">            resolve(data)</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    p1.then(function(value)&#123;</div><div class="line">        console.log(value)</div><div class="line">    &#125;,function(value)&#123;</div><div class="line">        console.log(value)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><strong> catch—–用来捕获错误 </strong></p>
<hr>
<p>Promise.all– 全部，用于将多个promise对象，组合，包装成一个全新的promise实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Promise.all([p1,p2,p3...]);</div></pre></td></tr></table></figure></p>
<p>所有的Promise对象，都正确，才走正确<br>否则，只有一个错误，就失败了</p>
<hr>
<blockquote>
<p>Promise.race —返回也是一个promise对象<br>        最先能执行的promise结果，哪个最快，用哪个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var p1=new Promise(function(resolve,reject)&#123;</div><div class="line">    setTimeout(resolve,50,&apos;one&apos;);</div><div class="line">&#125;)</div><div class="line">var p2=new Promise(function(resolve,reject)&#123;</div><div class="line">    setTimeout(resolve,100,&apos;two&apos;);</div><div class="line">&#125;)</div><div class="line">Promise.race([p1,p2]).then(function(value)&#123;</div><div class="line">    console.log(value)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p>Promise.reject()  —生成一个错误的promise<br>Promise.resolve()  —生成一个成功的promsie<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">语法：Promise.resolve(value)</div><div class="line">      Promise.resolve(promise)</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> ES6 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2017/03/26/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
